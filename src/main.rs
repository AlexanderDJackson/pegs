fn print_board(board: u16) {
    println!("    {:b}    ", board >> 15);

    print!("   {:b} ", (board << 1) >> 15);
    print!("{:b}   \n", (board << 2) >> 15);

    print!("  {:b} ", (board << 3) >> 15);
    print!("{:b} ", (board << 4) >> 15);
    print!("{:b}\n", (board << 5) >> 15);

    print!(" {:b} ", (board << 6) >> 15);
    print!("{:b} ", (board << 7) >> 15);
    print!("{:b} ", (board << 8) >> 15);
    print!("{:b} \n", (board << 9) >> 15);

    print!("{:b} ", (board << 10) >> 15);
    print!("{:b} ", (board << 11) >> 15);
    print!("{:b} ", (board << 12) >> 15);
    print!("{:b} ", (board << 13) >> 15);
    print!("{:b}\n", (board << 14) >> 15);
}

fn possible_positions(board: u16, transitions: &[[u16; 4]; 18]) -> Vec<u16> {
    let mut positions: Vec<u16> = Vec::new();

    for i in 0..18 {
        if (board & transitions[i][1] != 0
            && board & transitions[i][2] != 0
            && !board & transitions[i][3] != 0)
            || (!board & transitions[i][1] != 0
                && board & transitions[i][2] != 0
                && board & transitions[i][3] != 0)
        {
            positions.push(board ^ transitions[i][0]);
        }
    }

    positions
}

fn main() {
    let transitions: [[u16; 4]; 18] = [
        // / slant
        [
            0b1_10_100_0000_00000_0,
            0b1_00_000_0000_00000_0,
            0b0_10_000_0000_00000_0,
            0b0_00_100_0000_00000_0,
        ],
        [
            0b0_10_100_1000_00000_0,
            0b0_10_000_0000_00000_0,
            0b0_00_100_0000_00000_0,
            0b0_00_000_1000_00000_0,
        ],
        [
            0b0_00_100_1000_10000_0,
            0b0_00_100_0000_00000_0,
            0b0_00_000_1000_00000_0,
            0b0_00_000_0000_10000_0,
        ],
        [
            0b0_01_010_0100_00000_0,
            0b0_01_000_0000_00000_0,
            0b0_00_010_0000_00000_0,
            0b0_00_000_0100_00000_0,
        ],
        [
            0b0_00_010_0100_01000_0,
            0b0_00_010_0000_00000_0,
            0b0_00_000_0100_00000_0,
            0b0_00_000_0000_01000_0,
        ],
        [
            0b0_00_001_0010_00100_0,
            0b0_00_001_0000_00000_0,
            0b0_00_000_0010_00000_0,
            0b0_00_000_0000_00100_0,
        ],
        // \ slant
        [
            0b1_01_001_0000_00000_0,
            0b1_00_000_0000_00000_0,
            0b0_01_000_0000_00000_0,
            0b0_00_001_0000_00000_0,
        ],
        [
            0b0_01_001_0001_00000_0,
            0b0_01_000_0000_00000_0,
            0b0_00_001_0000_00000_0,
            0b0_00_000_0001_00000_0,
        ],
        [
            0b0_00_001_0001_00001_0,
            0b0_00_001_0000_00000_0,
            0b0_00_000_0001_00000_0,
            0b0_00_000_0000_00001_0,
        ],
        [
            0b0_10_010_0010_00000_0,
            0b0_10_000_0000_00000_0,
            0b0_00_010_0000_00000_0,
            0b0_00_000_0010_00000_0,
        ],
        [
            0b0_00_010_0010_00010_0,
            0b0_00_010_0000_00000_0,
            0b0_00_000_0010_00000_0,
            0b0_00_000_0000_00010_0,
        ],
        [
            0b0_00_100_0100_00100_0,
            0b0_00_100_0000_00000_0,
            0b0_00_000_0100_00000_0,
            0b0_00_000_0000_00100_0,
        ],
        // horizontal
        [
            0b0_00_111_0000_00000_0,
            0b0_00_100_0000_00000_0,
            0b0_00_010_0000_00000_0,
            0b0_00_001_0000_00000_0,
        ],
        [
            0b0_00_000_1110_00000_0,
            0b0_00_000_1000_00000_0,
            0b0_00_000_0100_00000_0,
            0b0_00_000_0010_00000_0,
        ],
        [
            0b0_00_000_0111_00000_0,
            0b0_00_000_0100_00000_0,
            0b0_00_000_0010_00000_0,
            0b0_00_000_0001_00000_0,
        ],
        [
            0b0_00_000_0000_11100_0,
            0b0_00_000_0000_10000_0,
            0b0_00_000_0000_01000_0,
            0b0_00_000_0000_00100_0,
        ],
        [
            0b0_00_000_0000_01110_0,
            0b0_00_000_0000_01000_0,
            0b0_00_000_0000_00100_0,
            0b0_00_000_0000_00010_0,
        ],
        [
            0b0_00_000_0000_00111_0,
            0b0_00_000_0000_00100_0,
            0b0_00_000_0000_00010_0,
            0b0_00_000_0000_00001_0,
        ],
    ];

    for i in possible_positions(0b1_00_110_1001_10111_0, &transitions) {
        print_board(i);
    }
}
